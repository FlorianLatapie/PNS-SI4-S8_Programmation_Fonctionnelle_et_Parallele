public class TD4 {
    // Returns the maximum of a stream of comparable.
    public static <T extends Comparable<T>> Optional<T> max(BasicStream<T> s) {
        return null;
    }

    // Returns a String composed of a representation of the stream elements joined together with specified delimiter.
    public static <T> String join(BasicStream<T> s, String delimiter) {
        return "";
    }

    // Returns a list that contains the n first elements of a stream.
    public static <T> List<T> collect(BasicStream<T> s, int n) {
        return null;
    }

    // Returns the average of all the even numbers in a given stream of integers. 0 if none.
    public static double averageEven(BasicStream<Integer> s) {
        return 0;
    }

    // Returns a stream based on a list.
    public static <T> BasicStream<T> toStream(List<T> l) {
        return null;
    }

    // Returns a stream based on a Lst list.
    public static <T> BasicStream<T> toStream(Lst<T> l) {
        return null;
    }

    // Returns a stream of successive integers from 0 to "infinity"
    public static BasicStream<Long> longStream() {
        return null;
    }

    // Returns the sum of n first numbers containing only digits 1 and 0 that are greater or equal than m
    public static long sum10(long m, int n) {
        return 0;
    }

    // Returns the square of all even numbers in a given list of integers.
    public static List<Integer> squareOfEven(List<Integer> l) {
        return null;
    }

    // Returns the average of all the numbers in a given list of integers.
    public static OptionalDouble average(List<Integer> l) {
        return null;
    }

    // Returns the longest word in a given list of strings.
    public static Optional<String> longest(List<String> l) {
        return null;
    }

    // Returns the most common element in a given list of integers.
    public static <T> Optional<T> mostCommon(List<T> l) {
        return null;
    }

    // Returns the first n Fibonacci numbers.
    public static List<Integer> fibs(int n) {
        return null;
    }

    static IntPredicate isPrime = x -> true;

    // Returns an int stream of prime numbers based on eratosthenes sieve.
    public static IntStream eratosthenes() {
        return null;
    }
}



