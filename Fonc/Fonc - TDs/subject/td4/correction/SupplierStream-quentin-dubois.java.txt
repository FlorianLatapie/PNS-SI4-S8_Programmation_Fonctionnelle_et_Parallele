package fr.uca.progfonc;

import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.*;

public class SupplierStream<T> implements BasicStream<T> {

    private final Supplier<Optional<T>> function;

    public SupplierStream(Supplier<Optional<T>> f) {
        this.function = f;
    }

    @Override
    public void forEach(Consumer<T> action) {
        Optional<T> e = function.get();
        if (e.isEmpty()) {
            return;
        }
        action.accept(e.get());
        forEach(action);
    }

    @Override
    public Optional<T> reduce(BinaryOperator<T> accumulator) {
        Optional<T> e = function.get();
        if (e.isEmpty()) {
            return Optional.empty();
        }
        AtomicReference<T> acc = new AtomicReference<>(e.get());
        forEach(x -> acc.set(accumulator.apply(x, acc.get())));
        return Optional.of(acc.get());
        // return reduce(accumulator, e.get());
    }

    private Optional<T> reduce(BinaryOperator<T> accumulator, T acc) {
        Optional<T> e = function.get();
        if (e.isEmpty()) {
            return Optional.of(acc);
        }
        return reduce(accumulator, accumulator.apply(e.get(), acc));
    }

    @Override
    public BasicStream<T> filter(Predicate<T> predicate) {
        return new SupplierStream<>(() -> {
            for (Optional<T> e = function.get(); e.isPresent(); e = function.get()) {
                if (predicate.test(e.get())) {
                    return e;
                }
            }
            return Optional.empty();
        });
    }

    @Override
    public BasicStream<T> limit(long maxSize) {
        AtomicInteger i = new AtomicInteger(0);
        return new SupplierStream<>(() -> {
            Optional<T> e = function.get();
            if (i.getAndIncrement() < maxSize && e.isPresent()) {
                return e;
            }
            return Optional.empty();
        });
    }

    @Override
    public <R> BasicStream<R> map(Function<T, R> mapper) {
        return new SupplierStream<>(() -> function.get().map(mapper));
    }
}
